import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart'; // Import the shared_preferences package to store data
import 'package:intl/intl.dart'; // Import the intl package to format dates
import 'package:location/location.dart'; // To get location
import 'package:http/http.dart' as http; // To access websites
import 'dart:convert';
import 'dart:math';

class Record extends StatefulWidget {
  @override
  _RecordState createState() => _RecordState();
}

class _RecordState extends State<Record> {
  String? _selectedTime;
  final List<String> _timeOptions = [
    '15 minutes ago',
    '30 minutes ago', // Add this option
    // Generate options from 1 hour to 24 hours
  ]..addAll(List.generate(
    24,
    (index) => '${index + 1} hour${index == 0 ? '' : 's'} ago',
  ));

  String? _selectedPlace;
  final List<String> _placeOptions = ['Home', 'Eat out', 'Null'];

  DateTime _calculateDiningTime(String selectedTime) {
    final now = DateTime.now();
    if (selectedTime.contains('minute')) {
      int minutes = int.parse(selectedTime.split(' ')[0]);
      return now.subtract(Duration(minutes: minutes));
    } else if (selectedTime.contains('hour')) {
      int hours = int.parse(selectedTime.split(' ')[0]);
      return now.subtract(Duration(hours: hours));
    }
    return now; // Default return current time
  }

  void _saveData() async {
    final prefs = await SharedPreferences.getInstance();
    final diningTime = _selectedTime != null ? _calculateDiningTime(_selectedTime!) : DateTime.now();
    final diningTimeString = DateFormat('yyyy-MM-dd HH:mm').format(diningTime);

    List<String> diningRecords = prefs.getStringList('diningRecords') ?? [];
    diningRecords.insert(0, '$diningTimeString at ${_selectedPlace ?? 'Null'}');
    await prefs.setStringList('diningRecords', diningRecords);

    ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text('Data saved')));

    _showSaveDialog();
  }

  void _showSaveDialog() {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text('Save Successful'),
          content: Text('What do you want to do next?'),
          actions: <Widget>[
            TextButton(
              child: Text('Go to Home Page'),
              onPressed: () {
                // Logic to navigate to the Home page
                Navigator.of(context).popUntil((route) => route.isFirst);
              },
            ),
            TextButton(
              child: Text('Go to Database'),
              onPressed: () {
                // Logic to navigate to the Database page
                Navigator.of(context).popAndPushNamed('/database'); // Assuming '/database' is the route for the Database page
              },
            ),
          ],
        );
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Record Dining')),
      body: Padding(
        padding: const EdgeInsets.symmetric(horizontal: 16.0), // Padding on the horizontal direction
        child: Column(
          mainAxisAlignment: MainAxisAlignment.start,
          children: [
            SizedBox(height: 50), // Add some space on top
            // Time selection part
            Row(
              children: [
                Expanded(
                  child: Text('Please record diet time:', style: TextStyle(fontSize: 16)),
                ),
                SizedBox(width: 20), // Space between elements
                Expanded(
                  child: DropdownButton<String>(
                    isExpanded: true, // Make the dropdown menu expand to fill available space
                    value: _selectedTime,
                    hint: Text('Select time'),
                    items: _timeOptions.map((String value) {
                      return DropdownMenuItem<String>(
                        value: value,
                        child: Text(value),
                      );
                    }).toList(),
                    onChanged: (newValue) {
                      setState(() {
                        _selectedTime = newValue;
                      });
                    },
                  ),
                ),
              ],
            ),
            SizedBox(height: 200), // Add spacing
            // Place selection part
            Row(
              children: [
                Expanded(
                  child: Text('Please record your diet place:', style: TextStyle(fontSize: 16)),
                ),
                SizedBox(width: 20), // Space between elements
                Expanded(
                  child: DropdownButton<String>(
                    isExpanded: true,
                    value: _selectedPlace,
                    hint: Text('Select place'),
                    items: _placeOptions.map((String value) {
                      return DropdownMenuItem<String>(
                        value: value,
                        child: Text(value),
                      );
                    }).toList(),
                    onChanged: (newValue) {
                      setState(() {
                        _selectedPlace = newValue;
                      });
                    },
                  ),
                ),
              ],
            ),
            Expanded(child: Container()), // Use Expanded to push the button to the bottom
            // Save button
            ElevatedButton(
              onPressed: _saveData,
              child: Text('Save'),
              style: ElevatedButton.styleFrom(
                padding: EdgeInsets.symmetric(horizontal: 50, vertical: 15),
              ),
            ),
            SizedBox(height: 100), // Space at the bottom
          ],
        ),
      ),
    );
  }
}

class Suggestion extends StatefulWidget {
  @override
  _SuggestionState createState() => _SuggestionState();
}

class _SuggestionState extends State<Suggestion> {
  String temperature = "";
  String humidity = "";
  String lat = "";
  String lon = "";
  String foodRecommendation = "Loading recommendation...";
  Location location = new Location();

  List<String> coldDishes = [
    "Prawn cocktail",
    "Cucumber sandwich",
    "Smoked salmon salad",
    "Egg and cress sandwich",
    "Beetroot and goat cheese salad",
    "Chicken Caesar salad",
    "Stilton and pear salad",
    "Coronation chicken",
    "Crab salad",
    "Ham and melon",
    "Caprese salad",
    "Greek salad",
    "Ploughmanâ€™s lunch",
    "Mixed charcuterie board",
    "Mozzarella and tomato salad",
    "Antipasti platter",
    "Roast beef slices with horseradish sauce",
    "Pickled herring",
    "Scottish smoked salmon",
    "Tuna salad",
    "Watermelon and feta salad",
    "Ratatouille",
    "Seafood cocktail",
    "Deviled eggs",
    "Artichoke dip with crudites"
  ];

  List<String> hotDishes = [
    "Beef stew",
    "Chicken tikka masala",
    "Shepherd's pie",
    "Lancashire hotpot",
    "Fish and chips",
    "Bangers and mash",
    "Roast beef with Yorkshire pudding",
    "Steak and kidney pie",
    "Full English breakfast",
    "Jacket potato with beans",
    "Beef Wellington",
    "Toad in the hole",
    "Steak and ale pie",
    "Chili con carne",
    "Cornish pasty",
    "Mushroom risotto",
    "Chicken and leek pie",
    "Pea and ham soup",
    "Liver and onions",
    "Braised lamb shanks",
    "Pork belly roast",
    "Spaghetti bolognese",
    "Vegetable curry",
    "Cottage pie",
    "Beef bourguignon"
  ];

  List<String> lightMeals = [
    "Porridge",
    "Toast with jam",
    "Fruit salad",
    "Vegetable soup",
    "Avocado toast",
    "Greek yogurt with honey and nuts",
    "Smoothie bowl",
    "Grilled chicken salad",
    "Quinoa salad",
    "Omelette with spinach and feta",
    "Tomato and basil bruschetta",
    "Spinach and ricotta quiche",
    "Cauliflower rice",
    "Sushi rolls",
    "Pasta salad",
    "Hummus with pita bread",
    "Caprese skewers",
    "Shrimp cocktail",
    "Ceviche",
    "Chicken Caesar wrap",
    "Baked falafel",
    "Vegan wraps",
    "Miso soup",
    "Rice paper rolls",
    "Kale and almond salad"
  ];

  List<String> heartyMeals = [
    "Sunday roast",
    "Lasagna",
    "Macaroni and cheese",
    "Meatloaf",
    "Chicken parmigiana",
    "Turkey with stuffing",
    "Beef brisket",
    "Pulled pork sandwich",
    "Spaghetti and meatballs",
    "Baked ziti",
    "Fried chicken",
    "Sausage and peppers",
    "Beef tacos",
    "Gumbo",
    "Jambalaya",
    "Paella",
    "Ratatouille with sausage",
    "Pot roast",
    "Clam chowder",
    "Beef stroganoff",
    "Shepherd's pie with sweet potato",
    "Moussaka",
    "Fish pie",
    "Chicken and dumplings",
    "Barbecue ribs"
  ];
  @override
  void initState() {
    super.initState();
    fetchWeather();
  }

  void fetchWeather() async {
    bool _serviceEnabled;
    PermissionStatus _permissionGranted;
    LocationData _locationData;

    _serviceEnabled = await location.serviceEnabled();
    if (!_serviceEnabled) {
      _serviceEnabled = await location.requestService();
      if (!_serviceEnabled) return;
    }

    _permissionGranted = await location.hasPermission();
    if (_permissionGranted == PermissionStatus.denied) {
      _permissionGranted = await location.requestPermission();
      if (_permissionGranted != PermissionStatus.granted) return;
    }

    _locationData = await location.getLocation();
    double latitude = _locationData.latitude ?? 51.5074; // Use London latitude if null
    double longitude = _locationData.longitude ?? -0.1278; // Use London longitude if null

    String apiKey = "1437ea5260b7349c4e602abc4270497d"; // Replace with your actual API key
    String url = "https://api.openweathermap.org/data/2.5/weather?lat=$latitude&lon=$longitude&appid=$apiKey&units=metric";

    var response = await http.get(Uri.parse(url));
    if (response.statusCode == 200) {
      var data = jsonDecode(response.body);
      setState(() {
        temperature = "${data['main']['temp']} Â°C";
        humidity = "${data['main']['humidity']} %";
      });
    } else {
      print('Failed to fetch weather data');
    }

    setState(() {
      lat = latitude.toString();  // Convert latitude to string and update state
      lon = longitude.toString();  // Convert longitude to string and update state
      foodRecommendation = recommendFood(double.parse(temperature.split(" ")[0]), double.parse(humidity.split(" ")[0]));
    });
  }

  String recommendFood(double temp, double hum) {
    final random = Random();
    if (temp > 25) {
      return coldDishes[random.nextInt(coldDishes.length)];
    } else if (temp < 10) {
      return hotDishes[random.nextInt(hotDishes.length)];
    } else if (hum > 80) {
      return lightMeals[random.nextInt(lightMeals.length)];
    } else {
      return heartyMeals[random.nextInt(heartyMeals.length)];
    }
  }

  void updateRecommendation() {
    // Recommend food according to temperature and humidity
    double temp = double.parse(temperature.split(" ")[0]);
    double hum = double.parse(humidity.split(" ")[0]);
    setState(() {
      foodRecommendation = recommendFood(temp, hum);
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Suggestion'),
      ),
      body: Column(
        children: <Widget>[
          Align(
            alignment: Alignment.topCenter,
            child: Padding(
              padding: EdgeInsets.only(top: 75),
              child: Column(
                children: <Widget>[
                  // Text('Latitude: $lat'),  // Display latitude
                  // Text('Longitude: $lon'),  // Display longitude
                  Text('Temperature: $temperature', style: TextStyle(fontSize: 20)),
                  Text('Humidity: $humidity', style: TextStyle(fontSize: 20)),
                ],
              ),
            ),
          ),

          SizedBox(height: 150), 

          Align(
            alignment: Alignment.center,
            child: Column(
              children: <Widget>[
                Text('Food Suggestion:', style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold)),
                SizedBox(height: 20), 
                Text(foodRecommendation, style: TextStyle(fontSize: 25)), // The specific content of the recommended food
              ],
            ),
          ),

          SizedBox(height: 200), 

          Align(
            alignment: Alignment.bottomCenter,
            child:
            ElevatedButton(
              onPressed: updateRecommendation, // new suggestion
              child: Text('Dislike ?', style: TextStyle(fontSize: 20)),
            ),
          ),
        ],
      ),
    );
  }
}

class Settings extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Settings'),
      ),
      body: Padding(
        padding: EdgeInsets.only(top: 60.0), // Controls the distance of the entire content from the top
        child: Row(
          mainAxisAlignment: MainAxisAlignment.spaceBetween,
          children: [
            Padding(
              padding: const EdgeInsets.all(20.0),
              child: Text('Clear recorded data?', style: TextStyle(fontSize: 16)),
            ),
            Padding(
              padding: const EdgeInsets.all(20.0),
              child: ElevatedButton(
                onPressed: () => _showConfirmationDialog(context),
                child: Text('Yes'),
              ),
            ),
          ],
        ),
      ),
    );
  }

  void _showConfirmationDialog(BuildContext context) {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text('Confirm'),
          content: Text('The data is not recoverable after clearing, are you sure you want to clear the historical data?'),
          actions: <Widget>[
            TextButton(
              onPressed: () {
                Navigator.of(context).pop(); // Close the dialog
                _clearData(context);
              },
              child: Text('Yes, I confirm'),
            ),
            TextButton(
              onPressed: () {
                Navigator.of(context).popUntil((route) => route.isFirst); // Return to the main page
              },
              child: Text('No'),
            ),
          ],
        );
      },
    );
  }

  void _clearData(BuildContext context) async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.remove('diningRecords'); // Assuming dining records are stored under the 'diningRecords' key
    ScaffoldMessenger.of(context).showSnackBar(SnackBar(
      content: Text('Historical data has been cleared'),
    ));
  }
}

// The Database page is used to display the user's saved dining records
class Database extends StatefulWidget {
  @override
  _DatabaseState createState() => _DatabaseState();
}

class _DatabaseState extends State<Database> {
  double averageMealsPerDay = 0; // The average number of meals per day
  Map<String, String> averageMealTimes = {}; // Average time for each meal
  Map<String, double> placePercentages = {}; // Percentages of dining places

  @override
  void initState() {
    super.initState();
    _loadDiningData(); // Load the dining data when the state is initialized
  }

  void _loadDiningData() async {
    final prefs = await SharedPreferences.getInstance();
    List<String> diningRecords = prefs.getStringList('diningRecords') ?? [];

    // Calculate the average number of meals per day
    final dates = diningRecords.map((record) => record.split(' ')[0]).toSet(); // Set of dining dates, deduplicated
    averageMealsPerDay = diningRecords.length / dates.length; // Total number of meals divided by the number of different days

    // Calculate the average time for each meal
    Map<String, int> totalMealTimes = {'Breakfast': 0, 'Lunch': 0, 'Dinner': 0};
    Map<String, int> mealCounts = {'Breakfast': 0, 'Lunch': 0, 'Dinner': 0};


    for (String record in diningRecords) {
      List<String> parts = record.split(' ');
      List<String> timeParts = parts[1].split(':');
      int hour = int.parse(timeParts[0]);
      int minute = int.parse(timeParts[1]);

      String mealType;
      if (hour >= 6 && hour < 11) mealType = 'Breakfast';
      else if (hour >= 11 && hour < 15) mealType = 'Lunch';
      else if (hour >= 15 && hour < 22) mealType = 'Dinner';
      else continue; // If not within the defined time range, it is not included in the statistics

      totalMealTimes[mealType] = totalMealTimes[mealType]! + hour * 60 + minute;
      mealCounts[mealType] = mealCounts[mealType]! + 1;
    }

    Map<String, String> tempAverageMealTimes = {};
    totalMealTimes.forEach((mealType, totalTime) {
      if (mealCounts[mealType]! > 0) {
        int averageTime = totalTime ~/ mealCounts[mealType]!;
        tempAverageMealTimes[mealType] =
        '${(averageTime ~/ 60).toString().padLeft(2, '0')}:${(averageTime % 60).toString().padLeft(2, '0')}';
      }
    });

    Map<String, int> placeCounts = {};
    diningRecords.forEach((record) {
      String place = record.split(' at ')[1];
      if (place != 'Null') {  // Skip the 'Null' option
        placeCounts[place] = (placeCounts[place] ?? 0) + 1;
      }
    });

    // Calculate the dining percentages for each place
    int totalValidPlaces = diningRecords.where((record) => !record.endsWith('Null')).length;
    placeCounts.forEach((key, value) {
      placePercentages[key] = (value / totalValidPlaces) * 100;
    });

    setState(() {
      averageMealTimes = tempAverageMealTimes; // Update the state with the calculated average meal times
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Diet Record'), // Title of the Diet Record page
      ),
      body: Padding(
        padding: const EdgeInsets.all(8.0),
        child: ListView(
          padding: EdgeInsets.only(top: 60.0), // Controls the distance of the text from the top
          children: [
            ListTile(
              title: Text('Average number of meals per day', style: TextStyle(fontSize: 16)),
              trailing: Text('${averageMealsPerDay.toStringAsFixed(2)}', style: TextStyle(fontSize: 16)),
            ),
            SizedBox(height: 30),
            ...averageMealTimes.entries.map((entry) => ListTile(
              title: Text('${entry.key} average time', style: TextStyle(fontSize: 16)),
              trailing: Text(entry.value, style: TextStyle(fontSize: 16)),
            )).toList(),
            SizedBox(height: 30),
            ...placePercentages.entries.map((entry) => ListTile(
              title: Text('${entry.key}', style: TextStyle(fontSize: 16)),
              trailing: Text('${entry.value.toStringAsFixed(2)}%', style: TextStyle(fontSize: 16)),
            )).toList(),
          ],
        ),
      ),
    );
  }
}

class HomePage extends StatefulWidget {
  @override
  _HomePageState createState() => _HomePageState();
}

class _HomePageState extends State<HomePage> {
  String timeSinceLastMeal = '';

  @override
  void initState() {
    super.initState();
    _calculateTimeSinceLastMeal(); // Calculate the time since the last meal when the widget initializes
  }

  void _calculateTimeSinceLastMeal() async {
    final prefs = await SharedPreferences.getInstance();
    // Assuming each record in diningRecords is in the format "yyyy-MM-dd HH:mm at Place"
    List<String> diningRecords = prefs.getStringList('diningRecords') ?? [];

    if (diningRecords.isNotEmpty) {
      String lastMealRecord = diningRecords.first;
      DateTime lastMealDateTime = DateFormat('yyyy-MM-dd HH:mm').parse(lastMealRecord.split(' at ')[0]);
      DateTime now = DateTime.now();

      Duration difference = now.difference(lastMealDateTime);

      setState(() {
        int days = difference.inDays;
        int hours = difference.inHours % 24;
        int minutes = difference.inMinutes % 60;
        timeSinceLastMeal = '${days > 0 ? '$days day ' : ''}${hours} hours ${minutes} minutes'; // Format the time since last meal as "X day(s) Y hours Z minutes"
      });
    }
  }


  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('On-time Eater'), // Title of the home page
      ),
      body: Stack(
        children: <Widget>[
          // Main page greeting text
          Align(
            alignment: Alignment.topCenter,
            child: Padding(
              padding: EdgeInsets.only(top: 150.0), // Control the overall content distance from the top
              child: Column(
                mainAxisSize: MainAxisSize.min, // Make the Column occupy space to fit its children
                children: [
                  Text(
                    'Have you eaten yet?', // First text
                    style: TextStyle(fontSize: 36), // Text size can be adjusted
                  ),
                  SizedBox(height: 20), // Space between two texts

                  Text(
                    'From last meal: $timeSinceLastMeal', // Second text
                    style: TextStyle(fontSize: 16),
                  ),
                  SizedBox(height: 50), // Space between two texts

                  ElevatedButton(
                    onPressed: _calculateTimeSinceLastMeal, // Button click event, triggers data refresh
                    child: Text('Refresh'),
                  ),
                ],
              ),
            ),
          ),

          // Use Align to place the button group at the bottom center of the screen
          Align(
            alignment: Alignment.bottomCenter,
            child: Column(
              mainAxisSize: MainAxisSize.min, // Make the Column as small as possible
              children: <Widget>[
                ElevatedButton(
                  onPressed: () {
                    Navigator.push(
                      context,
                      MaterialPageRoute(builder: (context) => Record()),
                    );
                  },
                  child: Text('Record'),
                  style: ButtonStyle(
                    minimumSize: MaterialStateProperty.all(Size(200, 50)), // Set the minimum width and height of the button
                  ),
                ),
                SizedBox(height: 20), // Space between button 1 and button 2

                ElevatedButton(
                  onPressed: () {
                    Navigator.push(
                      context,
                      MaterialPageRoute(builder: (context) => Suggestion()),
                    );
                  },
                  child: Text('Suggestion'),
                  style: ButtonStyle(
                    minimumSize: MaterialStateProperty.all(Size(200, 50)), // Set the minimum width and height of the button
                  ),
                ),
                SizedBox(height: 20), // Space between button 2 and button 3

                ElevatedButton(
                  onPressed: () {
                    Navigator.push(
                      context,
                      MaterialPageRoute(builder: (context) => Database()),
                    );
                  },
                  child: Text('Database'),
                  style: ButtonStyle(
                    minimumSize: MaterialStateProperty.all(Size(200, 50)), // Set the minimum width and height of the button
                  ),
                ),
                SizedBox(height: 75), // Distance from the bottom
              ],
            ),
          ),
          // Use Align to place the fourth button in the top right corner of the screen
          Align(
            alignment: Alignment.topRight,
            child: Padding(
              padding: EdgeInsets.only(top: 8.0, right: 8.0), // Distance from the top and right side
              child: ElevatedButton(
                onPressed: () {
                  Navigator.push(
                    context,
                    MaterialPageRoute(builder: (context) => Settings()),
                  );
                },
                child: Text('Settings'),
                style: ButtonStyle(
                  minimumSize: MaterialStateProperty.all(Size(100, 50)), // Set the minimum width and height of the button
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }
}

void main() {
  runApp(MaterialApp(
    routes: {
      '/': (context) => HomePage(),  // Assuming this is your home page
      '/database': (context) => Database(),  // Make sure the route name here matches the one you use for navigation
    },
    //home: HomePage(),
  ));
}
